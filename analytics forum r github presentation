---
title: "Untitled"
output:
  html_document:
    theme: readable
    highlight: espresso
    toc: true
    toc_float: true
    df_print: paged
---

```{=html}
<style>
  code{
  font-family: Inconsolata, Consolas, monospace;
}
  body{
  font-family: Calibri, Arial, sans-serif;
}
  blockquote{
  font-size: 14px
}
</style>
```

# Why/How to Use R

## Reproducibility, Sourcing

With R, you can create a script tracing all of the actions done with data. With an excel sheet, it can be difficult or impossible to trace how data was manipulated from its source. If you can read an R script, you can see how and why certain choices were made. It can make finding and fixing mistakes simpler (the pain I've felt debugging complex Excel formulas 😶‍🌫️)



## Getting into R with the Tidyverse

If you tried getting into R years ago you may have missed out on the `tidyverse`, which is a series of packages which share a common philosophy and evaluation techniques. It has really taken off in popularity in the last decade or so. Personally, I have found this way of writing R to improve my ability to read and write understandable code. 

A couple of common features of R with `tidyverse` packages:
 - *"Tidy" data*:  Datasets are assumed to be tidy, which is a way of structuring data such that each row represents one 'observation' and each column represents one variable about that observation. 
 - *Piping and the pipe operator*: Piping is taking the output of one line of code and using the pipe operator (`%>%` or `|>`) to pass that as the input into the next expression. This can make writing code relatively compact and save some steps. 
```{r eval=FALSE}
library(tidyverse)

income_base_model %>%
    filter(year %in% c(2010, 2020, 2030, 2040),
           age_group != "0 to 15",
           model_type != "base"
           ) %>%
    group_by(year, model_type, age_group) %>% summarize(population = sum(population)) %>% 
    group_by(year, model_type) %>%
    mutate(percent = population / sum(population), age_group = as.integer(age_group)) %>% ungroup() %>% 
    mutate(year = as.character(year)) %>% 
    ggplot(aes(x = age_group, y = percent, color = year, group = paste0(year, model_type))) +
    geom_smooth(se = F, linewidth = 0.9) + 
    geom_point() +
    facet_grid(cols = vars(model_type)) + scale_color_viridis_d()
```

The easiest way to get into R is to use a series of packages called the `tidyverse`.

# Why to Use Git/Github?

## Version Control

Imagine Word's track changes, but for all files and multi-file projects.
